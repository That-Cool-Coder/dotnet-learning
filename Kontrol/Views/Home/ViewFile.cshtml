@model Kontrol.ViewModels.ViewFile;
@{
    ViewData["Title"] = "View File";
}

<div class="text-center">
    <h1 class="display-4">View File</h1>
    @switch (Model.fileReadState)
    {
        case Kontrol.Helpers.FileReadState.READ:
            <h2>@Model.filePath</h2>
            <i class="fas fa-level-up-alt"></i>
            <a asp-action="ViewParentDirectory" asp-route-path="@Model.filePath">View parent directory</a>
            <br />
            <br />
            @switch (Model.fileType)
            {
                case Kontrol.Helpers.FileType.Text:
                    <form asp-route-filePath="@Model.filePath" asp-action="EditFile">
                        <input type="submit" class="file-save-button btn btn-primary"
                            value="Save changes to file">
                        <!-- Contenteditable divs (the best option for making this editor)
                            Can't be used as form elements. To fix this, there is an invisible
                            textarea that mirrors the div and is actually used in form submission -->
                        <div id="editTextDiv" class="raw-text-area" role="textbox" spellcheck="false"
                             onkeyup="updateHiddenTextArea()"
                             contenteditable>@System.Text.Encoding.UTF8.GetString(Model.fileContent)</div>
                        <textarea name="fileContent" id="hiddenEditTextArea" hidden></textarea>
                        <script>
                            function updateHiddenTextArea() {
                                document.getElementById('hiddenEditTextArea').value =
                                    document.getElementById('editTextDiv').innerText;
                            }
                            updateHiddenTextArea();
                        </script>
                    </form>
                    break;
                case Kontrol.Helpers.FileType.JPG:
                case Kontrol.Helpers.FileType.PNG:
                    <img class="file-display-image"
                         src="@Kontrol.Helpers.FileHelpers.Base64EncodeFile(Model.fileType, Model.fileContent)" />
                    break;
                case Kontrol.Helpers.FileType.MOV:
                case Kontrol.Helpers.FileType.MP4:
                    <video class="file-display-video" controls
                           src="@Kontrol.Helpers.FileHelpers.Base64EncodeFile(Model.fileType, Model.fileContent)">
                    </video>
                    break;
                case Kontrol.Helpers.FileType.MKV:
                case Kontrol.Helpers.FileType.AVI:
                case Kontrol.Helpers.FileType.WMV:
                    <p>This file type cannot be played by this web browser</p>
                    break;
            }
            break;

        case Kontrol.Helpers.FileReadState.PERMISSION_DENIED:
            <p>Insufficient permissions to view this file</p>
            <a href="javascript:history.back()">Go back</a>
            break;

        case Kontrol.Helpers.FileReadState.NOT_FOUND:
            @if (Model.filePath.Length > 0)
            {
                <p>@Model.filePath was not found</p>
            }
            else
            {
                <p>No file was entered</p>
            }
            <a href="javascript:history.back()">Go back</a>
            break;
    }
</div>
